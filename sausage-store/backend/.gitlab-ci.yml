cache:
  paths:
    - "${CI_PROJECT_DIR}/.m2/repository"


variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}
  JAVA_OPTS: -XX:MaxRAMPerscentage=90 


stages:
  - build
  - test
  - notify
  - release
  - deploy


include:
  - template: Security/SAST.gitlab-ci.yml


build-backend-code-job:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true 
  artifacts:
    paths:
      - backend/target/sausage-store-backend-${VERSION}.jar
      - ${CI_PROJECT_DIR}/.m2/ 

semgrep-sast:
  stage: test
  dependencies:
    - "build-backend-code-job"
  when: on_success
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: "14"
    MAVEN_REPO_PATH: "${CI_PROJECT_DIR}/.m2/repository"
  artifacts:
    paths:
      - "${CI_JOB_NAME}.json"
  after_script:
    - mv gl-sast-report.json ${CI_JOB_NAME}.json
    - cat ${CI_JOB_NAME}.json


sonarqube-backend-sast:
  stage: test
  dependencies:
    - "build-backend-code-job"
  when: on_success
  image: 
    name: maven:3.9.3-eclipse-temurin-17
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    SONAR_HOST_URL: ${SONARQUBE_URL}
    SONAR_TOKEN: ${SONAR_LOGIN}
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - cd backend
    - mvn verify sonar:sonar -Dsonar.qualitygate.wait=true -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK} -Dsonar.projectName=${SONAR_PROJECT_NAME_BACK} -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONAR_LOGIN}


telegram-notification-backend:
  stage: notify
  dependencies:
    - "build-backend-code-job"
  when: on_success
  variables:
    ARTIFACT_URL: "$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job"
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - echo "$ARTIFACT_URL"
    - curl -X POST -H 'Content-Type:application/json' --data '{"chat_id":'"$TG_CHAT_ID"', "text":"Александр Биричевский успешно собрал backend. Ссылка на артефакт:'"$ARTIFACT_URL"'"}' https://api.telegram.org/bot$TG_BOT_TOKEN/sendMessage


release-backend-image:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  needs:
    - build-backend-code-job
    - sonarqube-backend-sast
    - semgrep-sast
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $VERSION
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA latest


upload-backend-release:
  stage: release
  needs:
    - build-backend-code-job
    - sonarqube-backend-sast
    - semgrep-sast
  script:
    - cd backend
    - mvn deploy -DskipTests -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -s settings.xml -Dversion.application=${VERSION}


deploy-backend:
  stage: deploy
  needs:
    - release-backend-image
  image: docker:24.0.7-alpine3.19
  environment:
    name: production/backend
  when: manual
  before_script:
    - apk add docker-cli-compose openssh-client jq bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY"| tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
  script:
    - echo "VERSION=${VERSION}" >> deploy.env
    - echo "SPRING_DATASOURCE_URL=jdbc:postgresql://${PSQL_HOST}:${PSQL_PORT}/${PSQL_DBNAME}?ssl=true&sslrootcert=/app/YandexInternalRootCA.crt" >> deploy.env
    - echo "SPRING_DATASOURCE_USERNAME=${PSQL_USER}" >> deploy.env
    - echo "SPRING_DATASOURCE_PASSWORD=${PSQL_PASSWORD}" >> deploy.env
    - echo "REPORTS_MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_HOST}:27018/${MONGO_DATABASE}?tls=true" >> deploy.env
    - echo "REPORT_PATH=/var/www-data/htdocs" >> deploy.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - /bin/bash ./backend/deploy_blue_green.sh